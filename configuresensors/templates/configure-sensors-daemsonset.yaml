apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  labels:
    name: configure-sensors
    app: configure-sensors
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  name: host-setup
  namespace: kube-system
spec:
  selector:
    matchLabels:
      name: configure-sensors
  template:
    metadata:
      labels:
        name: configure-sensors
    spec:
      hostNetwork: true
      nodeSelector:
        {{ .Values.nodeSelector.nodetype }} : "true"
      containers:
      - name: configure-sensors
        image: {{ .Values.images.hostsetup }}
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
        env:
        - name: inline1interface
          value: {{ .Values.networkInterfaces.inline1interface.deviceName }}
        - name: inline1numofvfs
          value: "{{ .Values.networkInterfaces.inline1interface.numOfVirtualFunctions }}"
        - name: inline1irqcore
          value: "{{ .Values.networkInterfaces.inline1interface.irqCoreAssignment }}"          
        - name: inline2interface
          value: {{ .Values.networkInterfaces.inline2interface.deviceName }}
        - name: inline2numofvfs
          value: "{{ .Values.networkInterfaces.inline2interface.numOfVirtualFunctions }}"
        - name: inline2irqcore
          value: "{{ .Values.networkInterfaces.inline2interface.irqCoreAssignment }}"  
        - name: passive1interface
          value: {{ .Values.networkInterfaces.passive1interface.deviceName }}
        - name: passive1numofvfs
          value: "{{ .Values.networkInterfaces.passive1interface.numOfVirtualFunctions }}"
        - name: passive1irqcore
          value: "{{ .Values.networkInterfaces.passive1interface.irqCoreAssignment }}"  
        - name: STARTUP_SCRIPT
          value: |
            #! /bin/bash

            echo "----Enabling SR-IOV on inline and passive interfaces-----"
            echo 0 >  /sys/class/net/$inline1interface/device/sriov_numvfs
            echo $inline1numofvfs >  /sys/class/net/$inline1interface/device/sriov_numvfs
            echo 0 >  /sys/class/net/$inline2interface/device/sriov_numvfs
            echo $inline2numofvfs >  /sys/class/net/$inline2interface/device/sriov_numvfs
            echo  0 >  /sys/class/net/$passive1interface/device/sriov_numvfs
            echo  $passive1numofvfs >  /sys/class/net/$passive1interface/device/sriov_numvfs

            echo "----Disabling spoofchk and enabling trust on VFs-----"

            inline1numofvfsminus=$(expr $inline1numofvfs - 1)
            inline2numofvfsminus=$(expr $inline2numofvfs - 1)
            passive1numofvfsminus=$(expr $passive1numofvfs - 1)
            for x in $(seq 0 $inline1numofvfsminus);do ip link set dev $inline1interface vf $x spoofchk off; done
            for x in $(seq 0 $inline2numofvfsminus);do ip link set dev $inline2interface vf $x spoofchk off; done
            for x in $(seq 0 $passive1numofvfsminus);do ip link set dev $passive1interface vf $x spoofchk off; done
            for x in $(seq 0 $inline1numofvfsminus);do ip link set dev $inline1interface vf $x trust on; done
            for x in $(seq 0 $inline2numofvfsminus);do ip link set dev $inline2interface vf $x trust on; done
            for x in $(seq 0 $passive1numofvfsminus);do ip link set dev $passive1interface vf $x trust on; done

            echo "----Setting nic queue settings-----"

            ethtool -L  $inline1interface combined 1
            ethtool -L  $inline2interface combined 1
            ethtool -L  $passive1interface combined 1

            ethtool -C $inline1interface adaptive-rx on rx-usecs 100
            ethtool -C $inline2interface adaptive-rx on rx-usecs 100
            ethtool -C $passive1interface adaptive-rx on rx-usecs 100

            ethtool -G $inline1interface rx 512
            ethtool -G $inline2interface rx 512
            ethtool -G $passive1interface rx 512

            echo "----Disabling offloading options on physical functions-----"

            for i in rx tx tso ufo gso gro rxhash ntuple sg txvlan rxvlan; do ethtool -K $inline1interface $i off 2>&1 > /dev/null; done;

            for i in rx tx tso ufo gso gro rxhash ntuple sg txvlan rxvlan; do ethtool -K $inline2interface $i off 2>&1 > /dev/null; done;

            for i in rx tx tso ufo gso gro rxhash ntuple sg txvlan rxvlan; do ethtool -K $passive1interface $i off 2>&1 > /dev/null; done;

            echo "----Setting MTU to 9000-----"
            ip link set dev $inline1interface mtu 9000
            ip link set dev $inline2interface mtu 9000
            ip link set dev $passive1interface mtu 9000


            for NIC in $(ls -d /sys/class/net/$inline1interface/device/virtfn*/net/* | cut -f9 -d'/'); do ethtool -G $NIC rx 128; done
            for NIC in $(ls -d /sys/class/net/$inline2interface/device/virtfn*/net/* | cut -f9 -d'/'); do ethtool -G $NIC rx 128; done
            for NIC in $(ls -d /sys/class/net/$passive1interface/device/virtfn*/net/* | cut -f9 -d'/'); do ethtool -G $NIC rx 128; done
            for NIC in $(ls -d /sys/class/net/$inline1interface/device/virtfn*/net/* | cut -f9 -d'/'); do ethtool -G $NIC tx 128; done
            for NIC in $(ls -d /sys/class/net/$inline2interface/device/virtfn*/net/* | cut -f9 -d'/'); do ethtool -G $NIC tx 128; done
            for NIC in $(ls -d /sys/class/net/$passive1interface/device/virtfn*/net/* | cut -f9 -d'/'); do ethtool -G $NIC tx 128; done

            echo "----Disabling offloading options on virtual functions-----"

            NIC_DIR="/sys/class/net"
            for i in $( ls $NIC_DIR) ;
            do
              if [ -d "${NIC_DIR}/$i/device" -a ! -L "${NIC_DIR}/$i/device/physfn" ]; then
                declare -a VF_PCI_BDF
                declare -a VF_INTERFACE
                k=0
                for j in $( ls "${NIC_DIR}/$i/device" ) ;
                do
                  if [[ "$j" == "virtfn"* ]]; then
                    VF_PCI=$( readlink "${NIC_DIR}/$i/device/$j" | cut -d '/' -f2 )
                    VF_PCI_BDF[$k]=$VF_PCI
                    #get the interface name for the VF at this PCI Address
                    for iface in $( ls $NIC_DIR );
                    do
                      link_dir=$( readlink ${NIC_DIR}/$iface )
                      if [[ "$link_dir" == *"$VF_PCI"* ]]; then
                        VF_INTERFACE[$k]=$iface
                      fi
                    done
                    ((k++))
                  fi
                done
                NUM_VFs=${#VF_PCI_BDF[@]}
                if [[ $NUM_VFs -gt 0 ]]; then
                  #get the PF Device Description
                  PF_PCI=$( readlink "${NIC_DIR}/$i/device" | cut -d '/' -f4 )
                  PF_VENDOR=$( lspci -vmmks $PF_PCI | grep ^Vendor | cut -f2)
                  PF_NAME=$( lspci -vmmks $PF_PCI | grep ^Device | cut -f2).
                  echo "Virtual Functions on $PF_VENDOR $PF_NAME ($i):"
                  echo -e "PCI BDF\t\tInterface"
                  echo -e "=======\t\t========="
                  for (( l = 0; l < $NUM_VFs; l++ )) ;
                  do
                    echo -e "${VF_PCI_BDF[$l]}\t${VF_INTERFACE[$l]}"
                    echo -e "--Disabling options on ${VF_INTERFACE[$l]}--"
                    for i in rx tx tso ufo gso gro rxhash ntuple sg txvlan rxvlan; do ethtool -K ${VF_INTERFACE[$l]} $i off 2>&1 > /dev/null; done;
                    ip link set dev ${VF_INTERFACE[$l]} mtu 9000
                  done
                  unset VF_PCI_BDF
                  unset VF_INTERFACE
                  echo " "
                fi
              fi
            done


            echo "----Disabling irqbalance-----"

            systemctl stop irqbalance
            
            echo "----setting irq settings-----"
            cd i40e-2.4.3/scripts
            ./set_irq_affinity $inline1interface $inline1irqcore
            ./set_irq_affinity $inline2interface $inline2irqcore
            ./set_irq_affinity $passive1interface $passive1irqcore


            echo "----setting needed values for Elasticsearch-----"
            #needed for Elastic
            sysctl -w vm.max_map_count=262144
            

